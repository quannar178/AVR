
timerCounter01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000060  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051f  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  0000065f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ef  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bd  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	13 c0       	rjmp	.+38     	; 0x5c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void){
       DDRB=0xFF;//THI?T L?P C?NG B LÀ C?NG XU?T.
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
       PORTB=0x00;
  3c:	18 ba       	out	0x18, r1	; 24
       DDRD=0x00;//THI?T L?P C?NG D LÀ C?NG VÀO ?? NH?N BUTTON
  3e:	11 ba       	out	0x11, r1	; 17
       PORTD=0xFF;//S? D?NG ?I?N TR? KÉO LÊN ? C?NG B
  40:	82 bb       	out	0x12, r24	; 18

       TCCR0=(1<<CS02)|(1<<CS01);//THI?T L?P MODE CLOCK ON FAILING EDGE.
  42:	86 e0       	ldi	r24, 0x06	; 6
  44:	83 bf       	out	0x33, r24	; 51
       TCNT0=0;
  46:	12 be       	out	0x32, r1	; 50

       while (1){
             if (TCNT0==10) TCNT0=0;
  48:	82 b7       	in	r24, 0x32	; 50
  4a:	8a 30       	cpi	r24, 0x0A	; 10
  4c:	09 f4       	brne	.+2      	; 0x50 <__SREG__+0x11>
  4e:	12 be       	out	0x32, r1	; 50
             PORTB=TCNT0;//XU?T GIÁ TR? RA LED 7 ?O?N
  50:	82 b7       	in	r24, 0x32	; 50
  52:	88 bb       	out	0x18, r24	; 24
             if (bit_is_clear(PIND,7)) TCNT0=0;//??A V? GIÁ TR? 0 N?U NH?N BUTTON ? C?NG D, C? TH? PD7.
  54:	87 99       	sbic	0x10, 7	; 16
  56:	f8 cf       	rjmp	.-16     	; 0x48 <__SREG__+0x9>
  58:	12 be       	out	0x32, r1	; 50
  5a:	f6 cf       	rjmp	.-20     	; 0x48 <__SREG__+0x9>

0000005c <_exit>:
  5c:	f8 94       	cli

0000005e <__stop_program>:
  5e:	ff cf       	rjmp	.-2      	; 0x5e <__stop_program>
