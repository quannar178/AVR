
timerCounter21.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000010e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000054c  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d4  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001fc  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c8  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	2a c0       	rjmp	.+84     	; 0x62 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	28 c0       	rjmp	.+80     	; 0x96 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
volatile  unsigned char val=0;  //khai bao 1 bien tam val va khoi tao =0
int main(void){
	DDRB=0xFF;//THI?T L?P C?NG B LÀ C?NG XU?T.
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;//GIÁ TR? ??U C?A C?NG = 0
  4c:	18 ba       	out	0x18, r1	; 24
	TCCR1B=(1<<WGM12)|(1<<CS12)|(1<<CS11); //xung nhip tu chan T1, canh xuong
  4e:	8e e0       	ldi	r24, 0x0E	; 14
  50:	8e bd       	out	0x2e, r24	; 46
	OCR1A=4;             //gan gia tri can so sanh
  52:	84 e0       	ldi	r24, 0x04	; 4
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	9b bd       	out	0x2b, r25	; 43
  58:	8a bd       	out	0x2a, r24	; 42
	TIMSK=(1<<OCIE1A);//cho phep ngat khi gia tri dem bang 4
  5a:	80 e1       	ldi	r24, 0x10	; 16
  5c:	89 bf       	out	0x39, r24	; 57
	sei();                       //set bit I cho phep ngat toan cuc
  5e:	78 94       	sei
  60:	ff cf       	rjmp	.-2      	; 0x60 <main+0x18>

00000062 <__vector_6>:
		//do nothing
	}
	return 0;
}
//trinh phuc vu ngat compare match
ISR (TIMER1_COMPA_vect){
  62:	1f 92       	push	r1
  64:	0f 92       	push	r0
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	0f 92       	push	r0
  6a:	11 24       	eor	r1, r1
  6c:	8f 93       	push	r24
	val++;
  6e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  72:	8f 5f       	subi	r24, 0xFF	; 255
  74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (val==10) val=0;  //gioi han bien val tu 0 den 9
  78:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  7c:	8a 30       	cpi	r24, 0x0A	; 10
  7e:	11 f4       	brne	.+4      	; 0x84 <__vector_6+0x22>
  80:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	PORTB =val;        //xuat gia tri ra PORTB
  84:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  88:	88 bb       	out	0x18, r24	; 24
}
  8a:	8f 91       	pop	r24
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
