
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000017c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e5  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e0  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e4  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033c  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 48 00 	call	0x90	; 0x90 <main>
  74:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <uart_char_tx>:
    {
    }
}

void uart_char_tx(unsigned char chr){
	while(!((UCSRA) & (1<<UDRE)));
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <uart_char_tx>
	UCSRB &= ~(1<<TXB8);
  80:	50 98       	cbi	0x0a, 0	; 10
	UDR = chr;
  82:	8c b9       	out	0x0c, r24	; 12
  84:	08 95       	ret

00000086 <uart_address_tx>:
}

void uart_address_tx(unsigned char ch){
	while(!((UCSRA) & (1<<UDRE)));
  86:	5d 9b       	sbis	0x0b, 5	; 11
  88:	fe cf       	rjmp	.-4      	; 0x86 <uart_address_tx>
	UCSRB |= (1<<TXB8);
  8a:	50 9a       	sbi	0x0a, 0	; 10
	UDR = ch;
  8c:	8c b9       	out	0x0c, r24	; 12
  8e:	08 95       	ret

00000090 <main>:
void uart_char_tx(unsigned char ch);
void uart_address_tx(unsigned char ch);

int main(void)
{
    DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
  94:	18 ba       	out	0x18, r1	; 24
	
	UBRRH = 0;
  96:	10 bc       	out	0x20, r1	; 32
	UBRRL = 8;
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	89 b9       	out	0x09, r24	; 9
	
	UCSRA = 0x00;
  9c:	1b b8       	out	0x0b, r1	; 11
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<TXEN)|(1<<RXEN)|(1<<RXCIE)|(1<<UCSZ2);
  a2:	8c e9       	ldi	r24, 0x9C	; 156
  a4:	8a b9       	out	0x0a, r24	; 10
	sei();
  a6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f e3       	ldi	r18, 0x3F	; 63
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x1e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x28>
  b8:	00 00       	nop
	
	_delay_ms(1000);
	uart_address_tx(1);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 43 00 	call	0x86	; 0x86 <uart_address_tx>
	uart_char_tx(200);
  c0:	88 ec       	ldi	r24, 0xC8	; 200
  c2:	0e 94 3e 00 	call	0x7c	; 0x7c <uart_char_tx>
	uart_char_tx(123);
  c6:	8b e7       	ldi	r24, 0x7B	; 123
  c8:	0e 94 3e 00 	call	0x7c	; 0x7c <uart_char_tx>
	
	uart_address_tx(2);
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 43 00 	call	0x86	; 0x86 <uart_address_tx>
	uart_char_tx(100);
  d2:	84 e6       	ldi	r24, 0x64	; 100
  d4:	0e 94 3e 00 	call	0x7c	; 0x7c <uart_char_tx>
	uart_char_tx(254);
  d8:	8e ef       	ldi	r24, 0xFE	; 254
  da:	0e 94 3e 00 	call	0x7c	; 0x7c <uart_char_tx>
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x4e>

000000e0 <__vector_13>:
	while(!((UCSRA) & (1<<UDRE)));
	UCSRB |= (1<<TXB8);
	UDR = ch;
}

ISR(USART_RXC_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
	u_data = UDR;
  ec:	8c b1       	in	r24, 0x0c	; 12
  ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	PORTB = u_data;
  f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	88 bb       	out	0x18, r24	; 24
}
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
