
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000154  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a4  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050c  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c5  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002df  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008e  00000000  00000000  000012ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__vector_1>
   4:	50 c0       	rjmp	.+160    	; 0xa6 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	4b c0       	rjmp	.+150    	; 0xdc <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:

volatile int8_t val=0; //khai bao bien val 8 bits, co dau va gia tri ban dau = 0

int main(void)
{
    DDRD = 0x00; //khai bao portb la ngo nhap de su dung cho 2 chan ngat
  48:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF; //su dung dien tro noi keo len
  4a:	8f ef       	ldi	r24, 0xFF	; 255
  4c:	82 bb       	out	0x12, r24	; 18
	DDRB = 0xFF; //portc la output 
  4e:	87 bb       	out	0x17, r24	; 23
	
	MCUCR |= (1<<ISC11)|(1<<ISC01); //ca 2 ngat la canh ngat xuong
  50:	95 b7       	in	r25, 0x35	; 53
  52:	9a 60       	ori	r25, 0x0A	; 10
  54:	95 bf       	out	0x35, r25	; 53
	GICR |= (1<<INT1) | (1<<INT0); //cho phep 2 ngat hoat dong
  56:	9b b7       	in	r25, 0x3b	; 59
  58:	90 6c       	ori	r25, 0xC0	; 192
  5a:	9b bf       	out	0x3b, r25	; 59
	sei();
  5c:	78 94       	sei
	
	DDRC = 0xFF; //portc la output
  5e:	84 bb       	out	0x14, r24	; 20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  60:	20 e6       	ldi	r18, 0x60	; 96
  62:	3a ee       	ldi	r19, 0xEA	; 234
    while (1) 
    {
		PORTC++;
  64:	85 b3       	in	r24, 0x15	; 21
  66:	8f 5f       	subi	r24, 0xFF	; 255
  68:	85 bb       	out	0x15, r24	; 21
  6a:	c9 01       	movw	r24, r18
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <main+0x24>
  70:	f9 cf       	rjmp	.-14     	; 0x64 <main+0x1c>

00000072 <__vector_1>:
		_delay_loop_2(60000);
    }
	return 0;
}

ISR(INT0_vect){
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	8f 93       	push	r24
	val++;
  7e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  82:	8f 5f       	subi	r24, 0xFF	; 255
  84:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(val > 9) val = 0;
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	8a 30       	cpi	r24, 0x0A	; 10
  8e:	14 f0       	brlt	.+4      	; 0x94 <__vector_1+0x22>
  90:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	PORTB = val;
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	88 bb       	out	0x18, r24	; 24
}
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <__vector_2>:

ISR(INT1_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	val--;
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	81 50       	subi	r24, 0x01	; 1
  b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(val < 0) val = 9;
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c0:	88 23       	and	r24, r24
  c2:	1c f4       	brge	.+6      	; 0xca <__vector_2+0x24>
  c4:	89 e0       	ldi	r24, 0x09	; 9
  c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	PORTB = val;
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	88 bb       	out	0x18, r24	; 24
}
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
