
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000160  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5d  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e1  00000000  00000000  00000d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000508  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031b  00000000  00000000  00001dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000020ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  8a:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_MasterInit>:

volatile uint8_t wData[3] = {0, 80, 160}, dis[];
	
//khoi dong SPI o che do master
void SPI_MasterInit(void){
	SPI_DDR |= (1<<SCK_PIN)|(1<<MOSI_PIN);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6a       	ori	r24, 0xA0	; 160
  96:	87 bb       	out	0x17, r24	; 23
	SPI_PORT |= (1<<MISO_PIN); //dien tro keo len cho chan miso
  98:	c6 9a       	sbi	0x18, 6	; 24
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<CPHA)|(1<<SPR1)|(1<<SPR0);
  9a:	87 ed       	ldi	r24, 0xD7	; 215
  9c:	8d b9       	out	0x0d, r24	; 13
	
	//setup cho cac chan dieu khien dia chi slave
	ADDRESS_DDR |= (1<<Slave(2)) | (1<<Slave(1)) | (1<<Slave(0));
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	87 bb       	out	0x17, r24	; 23
	ADDRESS_PORT |= (1<<Slave(2)) | (1<<Slave(1)) | (1<<Slave(0));
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	87 60       	ori	r24, 0x07	; 7
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <SPI_Transmit>:
}

//send data, 1 byte, qua spi
void SPI_Transmit(uint8_t i, uint8_t data){
	cbi(ADDRESS_PORT, Slave(i));
  ac:	48 b3       	in	r20, 0x18	; 24
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <SPI_Transmit+0xe>
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	8a 95       	dec	r24
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <SPI_Transmit+0xa>
  be:	cf 01       	movw	r24, r30
  c0:	2e 2f       	mov	r18, r30
  c2:	20 95       	com	r18
  c4:	42 23       	and	r20, r18
  c6:	48 bb       	out	0x18, r20	; 24
	SPDR = data;
  c8:	6f b9       	out	0x0f, r22	; 15
	while(bit_is_clear(SPSR, SPIF)){};
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <SPI_Transmit+0x1e>
	sbi(ADDRESS_PORT, Slave(i));
  ce:	98 b3       	in	r25, 0x18	; 24
  d0:	89 2b       	or	r24, r25
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	08 95       	ret

000000d6 <main>:
}

int main(void)
{
    /* Replace with your application code */
    SPI_MasterInit();
  d6:	0e 94 49 00 	call	0x92	; 0x92 <SPI_MasterInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	87 ea       	ldi	r24, 0xA7	; 167
  dc:	91 e6       	ldi	r25, 0x61	; 97
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x8>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0xe>
  e4:	00 00       	nop
	_delay_ms(100);
	while (1) 
    {
		SPI_Transmit(0, wData[0]++);
  e6:	c0 e6       	ldi	r28, 0x60	; 96
  e8:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(10);
		
		SPI_Transmit(1, wData[1]++);
		if (wData[1] > 160)
		{
			wData[0] = 80;
  ea:	00 e5       	ldi	r16, 0x50	; 80
		_delay_ms(10);
		
		SPI_Transmit(0, wData[0]++);
		if (wData[2] > 240)
		{
			wData[2] = 160;
  ec:	10 ea       	ldi	r17, 0xA0	; 160
    /* Replace with your application code */
    SPI_MasterInit();
	_delay_ms(100);
	while (1) 
    {
		SPI_Transmit(0, wData[0]++);
  ee:	68 81       	ld	r22, Y
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	86 0f       	add	r24, r22
  f4:	88 83       	st	Y, r24
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 56 00 	call	0xac	; 0xac <SPI_Transmit>
		if (wData[0] > 80)
  fc:	88 81       	ld	r24, Y
  fe:	81 35       	cpi	r24, 0x51	; 81
 100:	08 f0       	brcs	.+2      	; 0x104 <main+0x2e>
		{
			wData[0] = 0;
 102:	18 82       	st	Y, r1
 104:	83 ec       	ldi	r24, 0xC3	; 195
 106:	99 e0       	ldi	r25, 0x09	; 9
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x32>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x38>
 10e:	00 00       	nop
		}
		_delay_ms(10);
		
		SPI_Transmit(1, wData[1]++);
 110:	69 81       	ldd	r22, Y+1	; 0x01
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	86 0f       	add	r24, r22
 116:	89 83       	std	Y+1, r24	; 0x01
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 56 00 	call	0xac	; 0xac <SPI_Transmit>
		if (wData[1] > 160)
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	81 3a       	cpi	r24, 0xA1	; 161
 122:	08 f0       	brcs	.+2      	; 0x126 <main+0x50>
		{
			wData[0] = 80;
 124:	08 83       	st	Y, r16
 126:	83 ec       	ldi	r24, 0xC3	; 195
 128:	99 e0       	ldi	r25, 0x09	; 9
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x54>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x5a>
 130:	00 00       	nop
		}
		_delay_ms(10);
		
		SPI_Transmit(0, wData[0]++);
 132:	68 81       	ld	r22, Y
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	86 0f       	add	r24, r22
 138:	88 83       	st	Y, r24
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 56 00 	call	0xac	; 0xac <SPI_Transmit>
		if (wData[2] > 240)
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	81 3f       	cpi	r24, 0xF1	; 241
 144:	08 f0       	brcs	.+2      	; 0x148 <main+0x72>
		{
			wData[2] = 160;
 146:	1a 83       	std	Y+2, r17	; 0x02
 148:	9f e9       	ldi	r25, 0x9F	; 159
 14a:	26 e8       	ldi	r18, 0x86	; 134
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	91 50       	subi	r25, 0x01	; 1
 150:	20 40       	sbci	r18, 0x00	; 0
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x78>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x82>
 158:	00 00       	nop
 15a:	c9 cf       	rjmp	.-110    	; 0xee <main+0x18>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
