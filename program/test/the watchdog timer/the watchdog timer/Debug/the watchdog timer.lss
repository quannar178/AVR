
the watchdog timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000136  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c7  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054c  00000000  00000000  0000078b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f6  00000000  00000000  00000cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f2  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

static unsigned int waiter;

int main(void)
{
    DDRC = 0x1;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	84 bb       	out	0x14, r24	; 20
	
	while(PINA == 1)
  80:	89 b3       	in	r24, 0x19	; 25
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	e9 f3       	breq	.-6      	; 0x80 <main+0x4>
	{
		;
	}
	
	WDTCR = 0x0B;
  86:	8b e0       	ldi	r24, 0x0B	; 11
  88:	81 bd       	out	0x21, r24	; 33
	while(PINA == 0){
		wdt_reset();
		++waiter;
		if (waiter == 50000)
		{
			PORTC = PORTC ^ 1;
  8a:	21 e0       	ldi	r18, 0x01	; 1
		;
	}
	
	WDTCR = 0x0B;
	
	while(PINA == 0){
  8c:	14 c0       	rjmp	.+40     	; 0xb6 <main+0x3a>
		wdt_reset();
  8e:	a8 95       	wdr
		++waiter;
  90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  94:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (waiter == 50000)
  a2:	80 35       	cpi	r24, 0x50	; 80
  a4:	93 4c       	sbci	r25, 0xC3	; 195
  a6:	39 f4       	brne	.+14     	; 0xb6 <main+0x3a>
		{
			PORTC = PORTC ^ 1;
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	82 27       	eor	r24, r18
  ac:	85 bb       	out	0x15, r24	; 21
			waiter = 0;
  ae:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		;
	}
	
	WDTCR = 0x0B;
	
	while(PINA == 0){
  b6:	89 b3       	in	r24, 0x19	; 25
  b8:	88 23       	and	r24, r24
  ba:	49 f3       	breq	.-46     	; 0x8e <main+0x12>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x40>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
